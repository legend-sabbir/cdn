{"version":3,"file":"service-manager.js","mappings":"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","sources":["webpack://ace-linters/webpack/universalModuleDefinition","webpack://ace-linters/./message-types.ts","webpack://ace-linters/./utils.ts","webpack://ace-linters/webpack/bootstrap","webpack://ace-linters/./services/service-manager.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","import {Ace} from \"ace-code\";\r\nimport {FormattingOptions} from \"vscode-languageserver-protocol\";\r\nimport {AceLinters} from \"./types\";\r\nimport ServiceOptions = AceLinters.ServiceOptions;\r\nimport * as lsp from \"vscode-languageserver-protocol\";\r\n\r\nexport abstract class BaseMessage {\r\n    abstract type: MessageType;\r\n    sessionId: string;\r\n\r\n    protected constructor(sessionId) {\r\n        this.sessionId = sessionId;\r\n    }\r\n}\r\n\r\nexport class InitMessage extends BaseMessage {\r\n    type: MessageType = MessageType.init;\r\n    mode: string;\r\n    options?: { [key: string]: any };\r\n    value: string;\r\n    version: number;\r\n\r\n    constructor(sessionId: string, value: string, version: number, mode: string, options?: { [p: string]: any }) {\r\n        super(sessionId);\r\n        this.version = version;\r\n        this.options = options;\r\n        this.mode = mode;\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nexport class FormatMessage extends BaseMessage {\r\n    type: MessageType = MessageType.format;\r\n    value: lsp.Range;\r\n    format: FormattingOptions;\r\n\r\n    constructor(sessionId: string, value: lsp.Range, format) {\r\n        super(sessionId);\r\n        this.value = value;\r\n        this.format = format;\r\n    }\r\n}\r\n\r\nexport class CompleteMessage extends BaseMessage {\r\n    type: MessageType = MessageType.complete;\r\n    value: lsp.Position;\r\n\r\n    constructor(sessionId: string, value: lsp.Position) {\r\n        super(sessionId);\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nexport class ResolveCompletionMessage extends BaseMessage {\r\n    type: MessageType = MessageType.resolveCompletion;\r\n    value: lsp.CompletionItem;\r\n\r\n    constructor(sessionId: string, value: lsp.CompletionItem) {\r\n        super(sessionId);\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nexport class HoverMessage extends BaseMessage {\r\n    type: MessageType = MessageType.hover;\r\n    value: lsp.Position;\r\n\r\n    constructor(sessionId: string, value: lsp.Position) {\r\n        super(sessionId);\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nexport class ValidateMessage extends BaseMessage {\r\n    type: MessageType = MessageType.validate;\r\n\r\n    constructor(sessionId: string) {\r\n        super(sessionId);\r\n    }\r\n}\r\n\r\nexport class ChangeMessage extends BaseMessage {\r\n    type: MessageType = MessageType.change;\r\n    value: string;\r\n    version: number\r\n\r\n    constructor(sessionId: string, value: string, version: number) {\r\n        super(sessionId);\r\n        this.value = value;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport class DeltasMessage extends BaseMessage {\r\n    type: MessageType = MessageType.applyDelta;\r\n    value: Ace.Delta[];\r\n    version: number;\r\n\r\n    constructor(sessionId: string, value: Ace.Delta[], version: number) {\r\n        super(sessionId);\r\n        this.value = value;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport class ChangeModeMessage extends BaseMessage {\r\n    type: MessageType = MessageType.changeMode;\r\n    mode: string;\r\n    value: string;\r\n\r\n    constructor(sessionId: string, value: string, mode: string) {\r\n        super(sessionId);\r\n        this.value = value;\r\n        this.mode = mode;\r\n    }\r\n}\r\n\r\nexport class ChangeOptionsMessage extends BaseMessage {\r\n    type: MessageType = MessageType.changeOptions;\r\n    options: ServiceOptions;\r\n    merge: boolean;\r\n\r\n    constructor(sessionId: string, options: ServiceOptions, merge: boolean = false) {\r\n        super(sessionId);\r\n        this.options = options;\r\n        this.merge = merge;\r\n    }\r\n}\r\n\r\nexport class DisposeMessage extends BaseMessage {\r\n    type: MessageType = MessageType.dispose;\r\n\r\n    constructor(sessionId: string) {\r\n        super(sessionId);\r\n    }\r\n}\r\n\r\nexport class GlobalOptionsMessage {\r\n    type: MessageType = MessageType.globalOptions;\r\n    serviceName: string;\r\n    options: ServiceOptions;\r\n    merge: boolean;\r\n\r\n    constructor(serviceName: string, options: ServiceOptions, merge: boolean) {\r\n        this.serviceName = serviceName;\r\n        this.options = options;\r\n        this.merge = merge;\r\n    }\r\n}\r\n\r\nexport enum MessageType {\r\n    init,\r\n    format,\r\n    complete,\r\n    resolveCompletion,\r\n    change,\r\n    hover,\r\n    validate,\r\n    applyDelta,\r\n    changeMode,\r\n    changeOptions,\r\n    dispose,\r\n    globalOptions\r\n}\r\n","export function mergeObjects(obj1, obj2) {\r\n    if (!obj1) return obj2;\r\n    if (!obj2) return obj1;\r\n    const mergedObjects = {};\r\n    for (const key of [...Object.keys(obj1), ...Object.keys(obj2)]) {\r\n        if (obj1[key] && obj2[key]) {\r\n            if (Array.isArray(obj1[key])) {\r\n                mergedObjects[key] = obj1[key].concat(obj2[key]);\r\n            } else {\r\n                mergedObjects[key] = mergeObjects(obj1[key], obj2[key]);\r\n            }\r\n        } else {\r\n            mergedObjects[key] = obj1[key] ?? obj2[key];\r\n        }\r\n    }\r\n    return mergedObjects;\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import LanguageService = AceLinters.LanguageService;\r\nimport ServiceOptions = AceLinters.ServiceOptions;\r\nimport {AceLinters} from \"../types\";\r\nimport {mergeObjects} from \"../utils\";\r\nimport {MessageType} from \"../message-types\";\r\nimport {TextDocumentIdentifier, VersionedTextDocumentIdentifier} from \"vscode-languageserver-protocol\";\r\n\r\ninterface ServiceData {\r\n    module: () => any,\r\n    className: string,\r\n    modes: string,\r\n    serviceInstance?: LanguageService,\r\n    options?: ServiceOptions\r\n}\r\n\r\nexport class ServiceManager {\r\n    private $services: { [serviceName: string]: ServiceData } = {};\r\n    private $sessionIDToMode: { [sessionID: string]: string } = {};\r\n\r\n    constructor(ctx) {\r\n        let doValidation = (document: TextDocumentIdentifier, serviceInstance?: LanguageService) => {\r\n            serviceInstance ??= this.getServiceInstance(document.uri);\r\n            if (!serviceInstance)\r\n                return;\r\n            let postMessage = {\r\n                \"type\": MessageType.validate,\r\n            };\r\n            let sessionIDList = Object.keys(serviceInstance.documents);\r\n            for (let sessionID of sessionIDList) {\r\n                serviceInstance.doValidation({uri: sessionID}).then((result) => {\r\n                    postMessage[\"sessionId\"] = sessionID;\r\n                    postMessage[\"value\"] = result;\r\n                    ctx.postMessage(postMessage);\r\n                });\r\n\r\n            }\r\n        }\r\n        ctx.addEventListener(\"message\", async (ev) => {\r\n            let message = ev.data;\r\n            let sessionID = message.sessionId as string;\r\n            let version = message.version;\r\n            let postMessage = {\r\n                \"type\": message.type,\r\n                \"sessionId\": sessionID,\r\n            };\r\n            let serviceInstance = this.getServiceInstance(sessionID);\r\n            let documentIdentifier = {\r\n                uri: sessionID,\r\n                version: version\r\n            };\r\n            switch (message[\"type\"] as MessageType) {\r\n                case MessageType.format:\r\n                    postMessage[\"value\"] = serviceInstance?.format(documentIdentifier, message.value, message.format);\r\n                    break;\r\n                case MessageType.complete:\r\n                    postMessage[\"value\"] = await serviceInstance?.doComplete(documentIdentifier, message.value);\r\n                    break;\r\n                case MessageType.resolveCompletion:\r\n                    postMessage[\"value\"] = await serviceInstance?.doResolve(message.value);\r\n                    break;\r\n                case MessageType.change:\r\n                    serviceInstance?.setValue(documentIdentifier, message.value);\r\n                    doValidation(documentIdentifier, serviceInstance);\r\n                    break;\r\n                case MessageType.applyDelta:\r\n                    serviceInstance?.applyDeltas(documentIdentifier, message.value);\r\n                    doValidation(documentIdentifier, serviceInstance);\r\n                    break;\r\n                case MessageType.hover:\r\n                    postMessage[\"value\"] = await serviceInstance?.doHover(documentIdentifier, message.value);\r\n                    break;\r\n                case MessageType.validate:\r\n                    postMessage[\"value\"] = await serviceInstance?.doValidation(documentIdentifier);\r\n                    break;\r\n                case MessageType.init: //this should be first message\r\n                    await this.addDocument(documentIdentifier, message.value, message.mode, message.options);\r\n                    doValidation(documentIdentifier);\r\n                    break;\r\n                case MessageType.changeMode:\r\n                    await this.changeDocumentMode(documentIdentifier, message.value, message.mode, message.options);\r\n                    doValidation(documentIdentifier, serviceInstance);\r\n                    break;\r\n                case MessageType.changeOptions:\r\n                    serviceInstance?.setOptions(sessionID, message.options);\r\n                    doValidation(documentIdentifier, serviceInstance);\r\n                    break;\r\n                case MessageType.dispose:\r\n                    this.removeDocument(documentIdentifier);\r\n                    break;\r\n                case MessageType.globalOptions:\r\n                    this.setGlobalOptions(message.serviceName, message.options, message.merge);\r\n                    break;\r\n            }\r\n\r\n            ctx.postMessage(postMessage);\r\n        })\r\n    }\r\n\r\n    private static async $initServiceInstance(service: ServiceData) {\r\n        let module = await service.module();\r\n        service.serviceInstance = new module[service.className](service.modes);\r\n        if (service.options)\r\n            service.serviceInstance!.setGlobalOptions(service.options);\r\n    }\r\n\r\n    private async $getServiceInstanceByMode(mode: string): Promise<LanguageService | undefined> {\r\n        let service = this.findServiceByMode(mode);\r\n        if (!service)\r\n            return;\r\n        if (!service.serviceInstance)\r\n            await ServiceManager.$initServiceInstance(service);\r\n        return service.serviceInstance!;\r\n    }\r\n\r\n    setGlobalOptions(serviceName: string, options: ServiceOptions, merge = false) {\r\n        let service = this.$services[serviceName];\r\n        if (!service)\r\n            return;\r\n        service.options = merge ? mergeObjects(options, service.options) : options;\r\n        if (service.serviceInstance) {\r\n            service.serviceInstance.setGlobalOptions(service.options!);\r\n        }\r\n    }\r\n\r\n    async addDocument(documentIdentifier: VersionedTextDocumentIdentifier, documentValue: string, mode: string, options?: ServiceOptions) {\r\n        if (!mode || !/^ace\\/mode\\//.test(mode))\r\n            return;\r\n        mode = mode.replace(\"ace/mode/\", \"\");\r\n        let serviceInstance = await this.$getServiceInstanceByMode(mode);\r\n        if (!serviceInstance)\r\n            return;\r\n        let documentItem = {\r\n            uri: documentIdentifier.uri,\r\n            version: documentIdentifier.version,\r\n            languageId: mode,\r\n            text: documentValue\r\n        }\r\n        serviceInstance.addDocument(documentItem);\r\n        this.$sessionIDToMode[documentIdentifier.uri] = mode;\r\n    }\r\n\r\n    async changeDocumentMode(documentIdentifier: VersionedTextDocumentIdentifier, value: string, mode: string, options: ServiceOptions) {\r\n        this.removeDocument(documentIdentifier);\r\n        await this.addDocument(documentIdentifier, value, mode, options);\r\n    }\r\n\r\n    removeDocument(document: TextDocumentIdentifier) {\r\n        let service = this.getServiceInstance(document.uri);\r\n        if (service) {\r\n            service.removeDocument(document);\r\n            delete this.$sessionIDToMode[document.uri];\r\n        }\r\n    }\r\n\r\n    getServiceInstance(sessionID: string): LanguageService | undefined {\r\n        let mode = this.$sessionIDToMode[sessionID];\r\n        let service = this.findServiceByMode(mode);\r\n        if (!mode || !service?.serviceInstance)\r\n            return; //TODO:\r\n\r\n        return service.serviceInstance;\r\n    }\r\n\r\n    findServiceByMode(mode: string): ServiceData | undefined {\r\n        return Object.values(this.$services).find((el) => {\r\n            let extensions = el.modes.split('|');\r\n            if (extensions.includes(mode))\r\n                return el;\r\n        });\r\n    }\r\n\r\n    registerService(name: string, service: ServiceData) {\r\n        this.$services[name] = service;\r\n    }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","a","i","self","BaseMessage","sessionId","this","MessageType","type","init","mode","options","value","version","constructor","super","format","complete","resolveCompletion","hover","validate","change","applyDelta","changeMode","changeOptions","merge","dispose","globalOptions","serviceName","mergeObjects","obj1","obj2","mergedObjects","key","Object","keys","Array","isArray","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","ServiceManager","$services","$sessionIDToMode","ctx","doValidation","document","serviceInstance","getServiceInstance","uri","postMessage","sessionIDList","documents","sessionID","then","result","addEventListener","async","ev","message","data","documentIdentifier","doComplete","doResolve","setValue","applyDeltas","doHover","addDocument","changeDocumentMode","setOptions","removeDocument","setGlobalOptions","static","service","className","modes","findServiceByMode","$initServiceInstance","documentValue","test","replace","$getServiceInstanceByMode","documentItem","languageId","text","values","find","el","split","includes","registerService","name"],"sourceRoot":""}